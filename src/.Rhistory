by = list(hers$cholesterol, hers$cardio), #Agrupamos por actividad fisica
mean, na.rm = T) #Obtenemos la media
hm_data
hm_data <- reshape(hm_data,
direction = "long",
varying = list(names(hm_data)[3:7]),
v.names = "Value",
idvar = c("Group.1 ~ Group.2"),
timevar = "Variable",
times = colnames(hm_data)[3:7])
row.names(hm_data) <- NULL
View(hm_data)
ggplot(hm_data, aes(x = Variable, y = `Group.1 ~ Group.2`, fill = Value)) +
geom_tile()
#Seleccionamos algunas variables cuantitativas: edad, peso, medida de la cintura, glucosa, colesterol LDL, colesterol HDL, trigliceridos, tensión arterial sistolica y tensión arterial diastolica
hm_data <- aggregate(hers[,c(2,5, 6, 7, 8)],
by = list(hers$cholesterol ~ hers$cardio), #Agrupamos por actividad fisica
mean, na.rm = T) #Obtenemos la media
#Seleccionamos algunas variables cuantitativas: edad, peso, medida de la cintura, glucosa, colesterol LDL, colesterol HDL, trigliceridos, tensión arterial sistolica y tensión arterial diastolica
hm_data <- aggregate(hers[,c(2,5, 6, 7, 8)],
by = list(hers$cholesterol, hers$cardio), #Agrupamos por actividad fisica
mean, na.rm = T) #Obtenemos la media
hm_data
View(hm_data)
hm_data <- reshape(hm_data,
direction = "long",
varying = list(names(hm_data)[3:7]),
v.names = "Value",
idvar = c("Group.1 ~ Group.2"),
timevar = "Variable",
times = colnames(hm_data)[3:7])
row.names(hm_data) <- NULL
View(hm_data)
ggplot(hm_data, aes(x = Variable, y = `Group.1 ~ Group.2`, fill = Value)) +
geom_tile()
ggplot(hm_data, aes(x = Variable, y = `Group.1 ~ Group.2`, fill = Value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "steelblue")
ggplot(hm_data, aes(x = Variable, y = `Group.1 ~ Group.2`, fill = Value)) +
geom_tile() +
# scale_fill_gradient2(low = "grey", high = "brown", mid = "white", midpoint = median(hm_data$Value))
scale_fill_gradient2(low = "grey", high = "brown", mid = "white", midpoint = 50)
ggplot(hm_data, aes(x = Variable, y = `Group.1 ~ Group.2`, fill = Value)) +
geom_tile() +
# scale_fill_gradient2(low = "forestgreen", high = "red", mid = "Gold", midpoint = median(hm_data$Value)) +
scale_fill_gradient(low = "white", high = "steelblue") +
labs(title = "Heatmap de variables por grupo de actividad física", fill = "Valor", y = "Grupo de actividad física", x = "Variable") +
scale_y_discrete(labels = c("Algo activa", "Mucho menos activa", "Mucho más activa", "Algo menos activa", "Algo más activa")) +
scale_x_discrete(labels = c("Edad", "TAD", "Glucosa", "HDL", "LDL", "TAS", "TG", "Cintura", "Peso"))
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
install.packages("fastmap")
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
tinytex::tlmgr_update()
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
tinytex::reinstall_tinytex()
tinytex:::install_prebuilt()
knitr::opts_chunk$set(echo = TRUE)
library(dslabs)
library(ggplot2)
library(ggrepel)
library(Rtsne)
library(umap)
install(umap)
install.packages(umap)
install.packages("umap")
library(dslabs)
library(ggplot2)
library(ggrepel)
library(Rtsne)
library(umap)
library(gridExtra)
data("tissue_gene_expression")
x <- tissue_gene_expression$x
y <- tissue_gene_expression$y
pca <- prcomp(x)
pca_df <- data.frame(PC1 = pca$x[,1], PC2 = pca$x[,2], Tissue = y)
pca_plot <- ggplot(pca_df, aes(x = PC1, y = PC2, color = Tissue)) +
geom_point() +
labs(title = "PCA") +
theme_minimal()
pca <- prcomp(x)
pca_df <- data.frame(PC1 = pca$x[,1], PC2 = pca$x[,2], Tissue = y)
pca_plot <- ggplot(pca_df, aes(x = PC1, y = PC2, color = Tissue)) +
geom_point() +
labs(title = "PCA") +
theme_minimal()
View(hm_data)
data("tissue_gene_expression")
x <- tissue_gene_expression$x
y <- tissue_gene_expression$y
pca <- prcomp(x)
pca_df <- data.frame(PC1 = pca$x[,1], PC2 = pca$x[,2], Tissue = y)
pca_plot <- ggplot(pca_df, aes(x = PC1, y = PC2, color = Tissue)) +
geom_point() +
labs(title = "PCA") +
theme_minimal()
pca <- prcomp(x)
pca_df <- data.frame(PC1 = pca$x[,1], PC2 = pca$x[,2], Tissue = y)
pca_plot <- ggplot(pca_df, aes(x = PC1, y = PC2, color = Tissue)) +
geom_point() +
labs(title = "PCA") +
theme_minimal()
pca_plot
set.seed(42)
tsne <- Rtsne(x, dims = 2, perplexity = 30)
pca <- prcomp(x)
pca_df <- data.frame(PC1 = pca$x[,1], PC2 = pca$x[,2], Tissue = y)
pca_plot <- ggplot(pca_df, aes(x = PC1, y = PC2, color = Tissue)) +
geom_point() +
stat_ellipse() +
labs(title = "PCA") +
theme_minimal()
pca_plot
set.seed(42)
tsne <- Rtsne(x, dims = 2, perplexity = 30)
set.seed(42)
tsne <- Rtsne(x, dims = 2, perplexity = 30)
unique_values <- !duplicated(tissue_gene_expression$x)
tissue_gene_expression$x <- tissue_gene_expression$x[unique_values, ]
tissue_gene_expression$y <- tissue_gene_expression$y[unique.values]
unique_values <- !duplicated(tissue_gene_expression$x)
tissue_gene_expression$x <- tissue_gene_expression$x[unique_values, ]
tissue_gene_expression$y <- tissue_gene_expression$y[unique_values]
tsne <- Rtsne(tissue_gene_expression$x)
tsne <- as.data.frame(tsne$Y)
colnames(tsne) <- c("tSNE1", "tSNE2")
tsne_plot <- ggplot(tsne, aes(x = tSNE1, y = tSNE2, color=tissue_gene_expression$y)) +
geom_point() + stat_ellipse() +
labs(title="Tissue Gene Expression t-SNE", color="Tissue")
tsne_plot
library(dslabs)
library(ggplot2)
library(ggrepel)
library(Rtsne)
library(umap)
library(gridExtra)
library(factoextra)
unique_values <- !duplicated(tissue_gene_expression$x)
tissue_gene_expression$x <- tissue_gene_expression$x[unique_values, ]
tissue_gene_expression$y <- tissue_gene_expression$y[unique_values]
tsne <- Rtsne(tissue_gene_expression$x)
tsne <- as.data.frame(tsne$Y)
colnames(tsne) <- c("tSNE1", "tSNE2")
tsne_plot <- ggplot(tsne, aes(x = tSNE1, y = tSNE2, color=tissue_gene_expression$y)) +
geom_point() + stat_ellipse() +
labs(title="Tissue Gene Expression t-SNE", color="Tissue")
tsne_plot
unique_values <- !duplicated(tissue_gene_expression$x)
tissue_gene_expression$x <- tissue_gene_expression$x[unique_values, ]
tissue_gene_expression$y <- tissue_gene_expression$y[unique_values]
tsne <- Rtsne(tissue_gene_expression$x)
tsne <- as.data.frame(tsne$Y)
tsne$z <- tissue_gene_expression$y
unique_values <- !duplicated(tissue_gene_expression$x)
tissue_gene_expression$x <- tissue_gene_expression$x[unique_values, ]
tissue_gene_expression$y <- tissue_gene_expression$y[unique_values]
tsne <- Rtsne(tissue_gene_expression$x)
tsne_dataframe <- as.data.frame(tsne$Y)
colnames(tsne_dataframe) <- c("tSNE1", "tSNE2")
tsne_dataframe$z <- tissue_gene_expression$y
library(dslabs)
library(ggplot2)
library(ggrepel)
library(Rtsne)
library(umap)
library(gridExtra)
library(factoextra)
library(tidyverse)
unique.values <- !duplicated(tissue_gene_expression$x)
tissue_gene_expression$x <- tissue_gene_expression$x[unique.values, ]
tissue_gene_expression$y <- tissue_gene_expression$y[unique.values]
tsne <- Rtsne(tissue_gene_expression$x)
tsne <- as.data.frame(tsne$Y)
colnames(tsne) <- c("tSNE1", "tSNE2")
tsne_plot <- ggplot(tsne, aes(x = tSNE1, y = tSNE2, color=tissue_gene_expression$y)) +
geom_point() + stat_ellipse() +
labs(title="Tissue Gene Expression t-SNE", color="Tissue")
tsne_plot
unique.values <- !duplicated(tissue_gene_expression$x)
tissue_gene_expression$x <- tissue_gene_expression$x[unique.values, ]
tissue_gene_expression$y <- tissue_gene_expression$y[unique.values]
tsne <- Rtsne(tissue_gene_expression$x)
tsne <- as.data.frame(tsne$Y)
colnames(tsne) <- c("tSNE1", "tSNE2")
tsne_plot <- ggplot(tsne, aes(x = tSNE1, y = tSNE2, colour=tissue_gene_expression$y)) +
geom_point() + stat_ellipse() +
labs(title="Tissue Gene Expression t-SNE", color="Tissue")
tsne_plot
t.sne <- tsne(tissue_gene_expression$x, initial_dims = 2)
library(dslabs)
library(ggplot2)
library(ggrepel)
library(Rtsne)
library(umap)
library(gridExtra)
library(factoextra)
library(tidyverse)
library(plotly)
t.sne <- tsne(tissue_gene_expression$x, initial_dims = 2)
library(dslabs)
library(ggplot2)
library(ggrepel)
library(Rtsne)
library(umap)
library(gridExtra)
library(factoextra)
library(tsne)
t.sne <- Rtsne(tissue_gene_expression$x, initial_dims = 2)
t.sne <- data.frame(t.sne)
umap_model <- umap(x)
umap_df <- data.frame(UMAP1 = umap_model$layout[,1], UMAP2 = umap_model$layout[,2], Tissue = y)
umap_plot <- ggplot(umap_df, aes(x = UMAP1, y = UMAP2, color = Tissue)) +
geom_point() +
labs(title = "UMAP") +
theme_minimal()
umap_model <- umap(x)
umap_df <- data.frame(UMAP1 = umap_model$layout[,1], UMAP2 = umap_model$layout[,2], Tissue = y)
umap_plot <- ggplot(umap_df, aes(x = UMAP1, y = UMAP2, color = Tissue)) +
geom_point() +
labs(title = "UMAP") +
theme_minimal()
umap_plot
umap_model <- umap(x)
umap_df <- data.frame(UMAP1 = umap_model$layout[,1], UMAP2 = umap_model$layout[,2], Tissue = y)
umap_plot <- ggplot(umap_df, aes(x = UMAP1, y = UMAP2, color = Tissue)) +
geom_point() + stat_ellipse() +
labs(title = "UMAP") +
theme_minimal()
umap_plot
# Eliminar entradas duplicadas
unique.values <- !duplicated(tissue_gene_expression$x)
tissue_gene_expression$x <- tissue_gene_expression$x[unique.values, ]
tissue_gene_expression$y <- tissue_gene_expression$y[unique.values]
# Hacer t-SNE
tsne <- Rtsne(tissue_gene_expression$x)
tsne <- as.data.frame(tsne$Y)
colnames(tsne) <- c("tSNE1", "tSNE2")
# Graficar
ggplot(tsne, aes(x = tSNE1, y = tSNE2, color=tissue_gene_expression$y)) +
geom_point() + stat_ellipse() +
labs(title="Tissue Gene Expression t-SNE", color="Tissue")
# Eliminar entradas duplicadas
unique.values <- !duplicated(tissue_gene_expression$x)
tissue_gene_expression$x <- tissue_gene_expression$x[unique.values, ]
tissue_gene_expression$y <- tissue_gene_expression$y[unique.values]
# Hacer t-SNE
tsne <- Rtsne(tissue_gene_expression$x)
tsne <- as.data.frame(tsne$Y)
colnames(tsne) <- c("tSNE1", "tSNE2")
# Graficar
tsne_plot <- ggplot(tsne, aes(x = tSNE1, y = tSNE2, color=tissue_gene_expression$y)) +
geom_point() + stat_ellipse() +
labs(title="Tissue Gene Expression t-SNE", color="Tissue")
tsne_plot
# Eliminar entradas duplicadas
unique.values <- !duplicated(tissue_gene_expression$x)
tissue_gene_expression$x <- tissue_gene_expression$x[unique.values, ]
tissue_gene_expression$y <- tissue_gene_expression$y[unique.values]
# Hacer t-SNE
tsne <- Rtsne(tissue_gene_expression$x)
tsne <- as.data.frame(tsne$Y)
colnames(tsne) <- c("tSNE1", "tSNE2")
# Graficar
ggplot(tsne, aes(x = tSNE1, y = tSNE2, color=tissue_gene_expression$y)) +
geom_point() + stat_ellipse() +
labs(title="Tissue Gene Expression t-SNE", color="Tissue")
# Eliminar entradas duplicadas
unique.values <- !duplicated(tissue_gene_expression$x)
tissue_gene_expression$x <- tissue_gene_expression$x[unique.values, ]
tissue_gene_expression$y <- tissue_gene_expression$y[unique.values]
# Hacer t-SNE
tsne <- Rtsne(tissue_gene_expression$x)
tsne <- as.data.frame(tsne$Y)
colnames(tsne) <- c("tSNE1", "tSNE2")
# Graficar
ggplot(tsne, aes(x = tSNE1, y = tSNE2, color=tissue_gene_expression$y)) +
geom_point() +
stat_ellipse() +
labs(title="Tissue Gene Expression t-SNE", color="Tissue")
data("tissue_gene_expression")
x <- tissue_gene_expression$x
y <- tissue_gene_expression$y
# Eliminar entradas duplicadas
unique.values <- !duplicated(tissue_gene_expression$x)
tissue_gene_expression$x <- tissue_gene_expression$x[unique.values, ]
tissue_gene_expression$y <- tissue_gene_expression$y[unique.values]
# Hacer t-SNE
tsne <- Rtsne(tissue_gene_expression$x)
tsne <- as.data.frame(tsne$Y)
colnames(tsne) <- c("tSNE1", "tSNE2")
# Graficar
ggplot(tsne, aes(x = tSNE1, y = tSNE2, color=tissue_gene_expression$y)) +
geom_point() +
stat_ellipse() +
labs(title="Tissue Gene Expression t-SNE", color="Tissue")
data("tissue_gene_expression")
x <- tissue_gene_expression$x
y <- tissue_gene_expression$y
library(dslabs)
library(ggplot2)
library(ggrepel)
library(Rtsne)
library(umap)
library(gridExtra)
library(factoextra)
data("tissue_gene_expression")
x <- tissue_gene_expression$x
y <- tissue_gene_expression$y
pca <- prcomp(x)
pca_df <- data.frame(PC1 = pca$x[,1], PC2 = pca$x[,2], Tissue = y)
pca_plot <- ggplot(pca_df, aes(x = PC1, y = PC2, color = Tissue)) +
geom_point() +
stat_ellipse() +
labs(title = "PCA") +
theme_minimal()
pca_plot
# Eliminar entradas duplicadas
unique.values <- !duplicated(tissue_gene_expression$x)
tissue_gene_expression$x <- tissue_gene_expression$x[unique.values, ]
tissue_gene_expression$y <- tissue_gene_expression$y[unique.values]
# Hacer t-SNE
tsne <- Rtsne(tissue_gene_expression$x)
tsne <- as.data.frame(tsne$Y)
colnames(tsne) <- c("tSNE1", "tSNE2")
# Graficar
ggplot(tsne, aes(x = tSNE1, y = tSNE2, color=tissue_gene_expression$y)) +
geom_point() +
stat_ellipse() +
labs(title="Tissue Gene Expression t-SNE", color="Tissue")
unique_values <- !duplicated(tissue_gene_expression$x)
tissue_gene_expression$x <- tissue_gene_expression$x[unique_values, ]
tissue_gene_expression$y <- tissue_gene_expression$y[unique_values]
tsne <- Rtsne(tissue_gene_expression$x)
tsne <- as.data.frame(tsne$Y)
colnames(tsne) <- c("tSNE1", "tSNE2")
ggplot(tsne, aes(x = tSNE1, y = tSNE2, color=tissue_gene_expression$y)) +
geom_point() +
stat_ellipse() +
labs(title="Tissue Gene Expression t-SNE", color="Tissue")
umap_model <- umap(x)
umap_df <- data.frame(UMAP1 = umap_model$layout[,1], UMAP2 = umap_model$layout[,2], Tissue = y)
umap_plot <- ggplot(umap_df, aes(x = UMAP1, y = UMAP2, color = Tissue)) +
geom_point() + stat_ellipse() +
labs(title = "UMAP") +
theme_minimal()
umap_plot
unique_values <- !duplicated(tissue_gene_expression$x)
tissue_gene_expression$x <- tissue_gene_expression$x[unique_values, ]
tissue_gene_expression$y <- tissue_gene_expression$y[unique_values]
tsne <- Rtsne(tissue_gene_expression$x)
tsne <- as.data.frame(tsne$Y)
colnames(tsne) <- c("tSNE1", "tSNE2")
pca_plot <- ggplot(tsne, aes(x = tSNE1, y = tSNE2, color=tissue_gene_expression$y)) +
geom_point() +
stat_ellipse() +
labs(title="Tissue Gene Expression t-SNE", color="Tissue")
pca_plot
git commit -m "Archivos de visualización añadido"
getwd()
dir()
library(ggplot2)
hers <- read.csv("../data/cardiovascular_disease.csv")
library(ggplot2)
library(ggplot2)
hers <- read.csv("../data/cardiovascular_disease.csv")
dir()
setwd("../DataScience/")
getwd()
dir()
getwd("data")
setwd("src/")
getwd()
hers <- read.csv("../data/cardiovascular_disease.csv")
counts <- table(hers$cholesterol) #Obtenemos la cuenta para cada categoría con la funcion table()
counts <- as.data.frame(counts) #Lo convertimos en un dataframe para gráficar
counts
library(ggplot2)
hers <- read.csv("../data/cardiovascular_disease.csv")
head(hers)
dim(hers)
counts <- table(hers$cholesterol) #Obtenemos la cuenta para cada categoría con la funcion table()
counts <- as.data.frame(counts) #Lo convertimos en un dataframe para gráficar
counts
ggplot(counts, aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
theme(axis.ticks.x = element_blank(), axis.text.x=element_blank()) +
scale_fill_discrete(name = "Nivel de colesterol", labels = c("normal", "por encima de lo normal", "muy por encima de lo normal")) +
labs(title = "Numero de personas por cada nivel de colesterol", x = "Nivel de colesterol", y = "Número personas")
counts2 <- tapply(hers$cholesterol,
list(hers$cholesterol, hers$cardio),
table)
counts2 <- as.data.frame(counts2)
counts2$Colesterol <- rownames(counts2)
counts2
counts2 <- reshape(counts2, #Objeto a transformar
direction = "long", #Necesitamos formato long
varying = list(names(counts2)[1:2]), #Las columnas a alargar (las que tienen las cuentas) son la 1 y la 2
v.names = "Counts", #Las cuentas se almacenaran en la columna "Counts"
idvar = "Colesterol", #La variable con los identificadores del grupo de actividad fisica
timevar = "Enfermedad", #Variable que vamos a alargar, que corresponde a las columnas "no" y "yes"
times = c("no", "yes"))
row.names(counts2) <- NULL
counts2
#Barras lado a lado
ggplot(counts2, aes(x = Colesterol, y = Counts, fill = Enfermedad)) +
geom_bar(stat = "identity", position=position_dodge()) +
coord_flip() +
scale_fill_discrete(name = "Presencia de una \n enfermedad \n cardiovascular", labels = c("No", "Sí")) +
scale_x_discrete(labels = c("normal", "por encima de lo normal", "muy por encima de lo normal")) +
labs(title = "Numero de personas por nivel de colesterol \n y enfermedad cardiovascular", x = "Nivel de colesterol", y = "Número de personas")
ggplot(counts, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0)
ggplot(counts, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0) +
theme(axis.text = element_blank(), #Elimina los numeros
axis.ticks = element_blank(), #Elimina la raya
panel.grid  = element_blank()) #Elimina el circulo blanco
ggplot(counts, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid  = element_blank()) +
scale_fill_discrete(name = "Actividad física", labels = c("Algo activa", "Mucho menos activa", "Mucho más activa", "Algo menos activa", "Algo más activa")) +
labs(title = "Numero de mujeres pertenecientes a cada grupo de \n actividad física", x = "", y = "")
ggplot(counts, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid  = element_blank()) +
scale_fill_discrete(name = "Actividad física", labels = c("Algo activa", "Mucho menos activa", "Mucho más activa", "Algo menos activa", "Algo más activa")) +
labs(title = "Numero de personas por nivel de colesterol \n y enfermedad cardiovascular", x = "", y = "")
ggplot(counts, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid  = element_blank()) +
scale_fill_discrete(name = "Actividad física", labels = c("Algo activa", "Mucho menos activa", "Mucho más activa", "Algo menos activa", "Algo más activa")) +
labs(title = "Numero de personas por nivel de \ncolesterol y enfermedad cardiovascular", x = "", y = "")
ggplot(counts, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid  = element_blank()) +
scale_fill_discrete(name = "Actividad física", labels = c("Algo activa", "Mucho menos activa", "Mucho más activa", "Algo menos activa", "Algo más activa")) +
labs(title = "Numero de personas por nivel de colesterol \n y enfermedad cardiovascular", x = "", y = "")
View(counts)
ggplot(counts, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid  = element_blank()) +
scale_fill_discrete(name = "Nivel de colesterol", labels = c("normal", "por encima de lo normal", "muy por encima de lo normal")) +
labs(title = "Numero de personas por nivel de colesterol", x = "", y = "")
ggplot(hers, aes(x = height)) +
geom_histogram() +
labs(title = "Histograma de la estatura", "Estatura (cm)", y = "Recuento")
ggplot(hers, aes(x = height)) +
geom_histogram(binwidth = 2, color = "black", fill = "white") +
labs(title = "Histograma de la estatura", x = "Estatura (cm)", y = "Recuento")
ggplot(hers, aes(x = height)) +
geom_histogram(aes(y=..density..), binwidth = 2, color = "black", fill = "white") +
geom_density(alpha = 0.2, fill = "blue") +
labs(title = "Histograma de la estatura", x = "Estatura (cm)", y = "Recuento")
ggplot(hers, aes(x = height)) +
geom_histogram(aes(y=..density..), binwidth = 2, color = "black", fill = "white") +
geom_density(alpha = 0.2, fill = "blue") +
labs(title = "Histograma de la estatura", x = "Estatura (cm)", y = "Recuento")
ggplot(hers, aes(x = height, color = gender)) +
geom_histogram(binwidth = 2.5) +
labs(title = "Histograma de la estatura", x = "Estatura (cm)", y = "Recuento")
ggplot(hers, aes(x = height, color = gender)) +
geom_histogram(binwidth = 2.5) +
labs(title = "Histograma de la estatura", x = "Estatura (cm)", y = "Recuento") +
scale_color_discrete(name = "Género", labels = c("Mujer", "Hombre"))
View(hers)
ggplot(hers, aes(x = height, color = gender)) +
geom_histogram(binwidth = 2.5) +
labs(title = "Histograma de la estatura", x = "Estatura (cm)", y = "Recuento") +
scale_color_discrete(name = "Género", labels = c("Mujer", "Hombre"))
ggplot(hers, aes(x = height, color = factor(gender))) +
geom_histogram(binwidth = 2.5) +
labs(title = "Histograma de la estatura", x = "Estatura (cm)", y = "Recuento") +
scale_color_discrete(name = "Género", labels = c("Mujer", "Hombre"))
ggplot(hers, aes(x = ap_hi, y = ap_lo)) +
geom_point() +
labs(title = "Gráfica de dispersión entre presión sistólica y diastólica", x = "Presión sistólica", y = "Presión diastólica")
ggplot(hers, aes(x = ap_hi, y = ap_lo)) +
geom_point() +
geom_smooth(method = lm) +
labs(title = "Gráfica de dispersión entre presión sistólica y diastólica", x = "Presión sistólica", y = "Presión diastólica")
ggplot(hers, aes(x = ap_hi, y = ap_lo)) +
geom_point(color = "#39B600", shape = 23, alpha = 0.5) +
labs(title = "Gráfica de dispersión entre presión sistólica y diastólica", x = "Presión sistólica", y = "Presión diastólica")
ggplot(hers, aes(x = ap_hi, y = ap_lo)) +
geom_point() +
geom_smooth(method = lm) +
labs(title = "Gráfica de dispersión entre presión sistólica y diastólica", x = "Presión sistólica", y = "Presión diastólica") + xlim(0, 250) +
ylim(0, 200)
ggplot(hers, aes(x = ap_hi, y = ap_lo)) +
geom_point(color = "#39B600", shape = 23, alpha = 0.5) +
labs(title = "Gráfica de dispersión entre presión sistólica y diastólica", x = "Presión sistólica", y = "Presión diastólica") + xlim(0, 250) +
ylim(0, 200)
