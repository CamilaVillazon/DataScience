df_qs[var, ] <<- c(Q1 = Q1, Q2 = Q2, Q3 = Q3, O_up = O_up, O_down = O_down)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, qs))
df_qs
df_sk <- data.frame(skew = numeric(length(numeric_attributes)),
kur = numeric(length(numeric_attributes)),
row.names = numeric_attributes)
# Definir la función para calcular las estadísticas
sk <- function(var) {
skew <- skewness(cvd[[var]])
kur <- kurtosis(cvd[[var]])
# Asignar los resultados a la fila correspondiente de df_mmm
df_sk[var, ] <<- c(skew = skew , kur = kur)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, sk))
df_sk
cvd$bmi <- cvd$weight/((cvd$height/100)**2)
cvd$pulse <- cvd$ap_hi - cvd$ap_lo
head(cvd)
numeric_attributes <- c("age_year","height","weight","ap_hi","ap_lo", "bmi", "pulse")
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, mmm))
# Ver el resultado
df_mmm
par(mfrow=c(2, 2))
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, qs))
df_qs
invisible(lapply(c("bmi", "pulse"), boxplots))
cvd_original <- cvd
cvd <- subset(cvd, (cvd$bmi <= 39.74288 & cvd$bmi >= 14.35445) & (cvd$pulse <= 65 & cvd$pulse >= 25))
print("bmi")
max(cvd$bmi)
min(cvd$bmi)
print("pulse")
max(cvd$pulse)
min(cvd$pulse)
cvd$bmi_clasification <- findInterval(cvd$bmi, c(0, 18.5, 25, 30, 40))
cvd$bmi_clasification <- multigsub(sort(unique(cvd$bmi_clasification)), # patrón a buscar
c("Bajo peso", "Peso normal", "Sobrepeso", "Obesidad"),
cvd$bmi_clasification) # objeto sobre el cual reemplazar
head(cvd)
cvd$pulse_clasification <- findInterval(cvd$pulse, c(0, 30, 40, 50, 66))
head(cvd)
par(mfrow = c(2,2))
# Función para crear un boxplot para cada variable
qq <- function(var) {
qqnorm(cvd[[var]], main = var)
qqline(cvd[[var]])
nor <- lillie.test(cvd[[var]])
print(
paste(var,"pvalue:", nor$p.value)
)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, qq))
dist <- function(var) {
descdist(cvd[[var]], boot = 1000)  # Ejecuta descdist con una muestra de bootstrap
Sys.sleep(0.1)  # Pausa breve para asegurarnos de que la gráfica se ha generado
title(main = paste("\n\nDistribución de", var))  # Cambia el título
}
invisible(lapply(numeric_attributes, dist))
# 1. Selección de columnas numéricas relevantes (excluyendo `id`)
data_for_tsne <- cvd[, c("age_year", "height", "weight", "ap_hi", "ap_lo", "bmi", "pulse")]
# 2. Escalado de datos
data_scaled <- scale(data_for_tsne)
# 3. Creación de un índice lógico para las filas no duplicadas
non_duplicates_index <- !duplicated(data_scaled)
# 4. Eliminación de filas duplicadas
data_scaled <- data_scaled[non_duplicates_index, ]
# 5. Aplicación de t-SNE
set.seed(42)  # para reproducibilidad
tsne_results <- Rtsne(data_scaled, dims = 2, perplexity = 30, verbose = TRUE, max_iter = 500)
cvd$cardio <- as.factor(cvd$cardio)
inf_est <- function(var) {
print(ggplot(data = cvd, aes(x = cardio, y = var, color = cardio)) +
geom_boxplot() +
theme_bw()
)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, inf_est))
ggplot(data = cvd, aes(x = cardio, y = bmi, color = cardio)) +
geom_boxplot() +
theme_bw()
numeric_attributes
cvd$cardio <- as.factor(cvd$cardio)
inf_est <- function(var) {
print(ggplot(data = cvd, aes(x = cardio, y = cvd$var, color = cardio)) +
geom_boxplot() +
theme_bw()
)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, inf_est))
cvd$cardio <- as.factor(cvd$cardio)
inf_est <- function(var) {
print(ggplot(data = cvd, aes(x = cardio, y = var, color = cardio)) +
geom_boxplot() +
theme_bw()
)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, inf_est))
cvd$cardio <- as.factor(cvd$cardio)
inf_est <- function(var) {
ggplot(data = cvd, aes(x = cardio, y = var, color = cardio)) +
geom_boxplot() +
theme_bw()
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, inf_est))
cvd$cardio <- as.factor(cvd$cardio)
inf_est <- function(var) {
print(ggplot(data = cvd, aes(x = cardio, y = !!sym(var), color = cardio)) +
geom_boxplot() +
theme_bw()
)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, inf_est))
cvd$cardio <- as.factor(cvd$cardio)
inf_est <- function(var) {
print(ggplot(data = cvd, aes(x = cardio, y = !!sym(var), color = cardio)) +
geom_boxplot() +
theme_bw()
)
fligner.test(cvd$var~cardio)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, inf_est))
cvd$cardio <- as.factor(cvd$cardio)
inf_est <- function(var) {
print(ggplot(data = cvd, aes(x = cardio, y = !!sym(var), color = cardio)) +
geom_boxplot() +
theme_bw()
)
fligner.test(cvd$var~cvd$cardio)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, inf_est))
cvd$cardio <- as.factor(cvd$cardio)
inf_est <- function(var) {
print(ggplot(data = cvd, aes(x = cardio, y = !!sym(var), color = cardio)) +
geom_boxplot() +
theme_bw()
)
fligner.test(cvd[[var]]~cvd$cardio)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, inf_est))
cvd$cardio <- as.factor(cvd$cardio)
inf_est <- function(var) {
print(ggplot(data = cvd, aes(x = cardio, y = !!sym(var), color = cardio)) +
geom_boxplot() +
theme_bw()
fligner.test(cvd[[var]]~cvd$cardio)
cvd$cardio <- as.factor(cvd$cardio)
inf_est <- function(var) {
print(ggplot(data = cvd, aes(x = cardio, y = !!sym(var), color = cardio)) +
geom_boxplot() +
theme_bw(),
fligner.test(cvd[[var]]~cvd$cardio)
)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, inf_est))
cvd$cardio <- as.factor(cvd$cardio)
inf_est <- function(var) {
print(ggplot(data = cvd, aes(x = cardio, y = !!sym(var), color = cardio)) +
geom_boxplot() +
theme_bw()
)
print(fligner.test(cvd[[var]]~cvd$cardio))
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, inf_est))
cvd$cardio <- as.factor(cvd$cardio)
inf_est <- function(var) {
print(ggplot(data = cvd, aes(x = cardio, y = !!sym(var), color = cardio)) +
geom_boxplot() +
theme_bw()
)
print(paste(var,fligner.test(cvd[[var]]~cvd$cardio)))
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, inf_est))
cvd$cardio <- as.factor(cvd$cardio)
inf_est <- function(var) {
print(ggplot(data = cvd, aes(x = cardio, y = !!sym(var), color = cardio)) +
geom_boxplot() +
theme_bw()
)
print(var)
print(fligner.test(cvd[[var]]~cvd$cardio))
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, inf_est))
cvd$cardio <- as.factor(cvd$cardio)
inf_est <- function(var) {
print(ggplot(data = cvd, aes(x = cardio, y = !!sym(var), color = cardio)) +
geom_boxplot() +
theme_bw()
)
print(var)
print(fligner.test(cvd[[var]]~cvd$cardio))
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, inf_est))
cvd$cardio <- as.factor(cvd$cardio)
inf_est <- function(var) {
print(ggplot(data = cvd, aes(x = cardio, y = !!sym(var), color = cardio)) +
geom_boxplot() +
theme_bw()
)
print(var)
print(fligner.test(cvd[[var]]~cvd$cardio))
sep<-gsub("yes","Y", cvd[[var]])
sep<-gsub("no","N", cvd[[var]])
var_sep<-data.frame(Tg=cvd[[var]], D=cvd$cardio)
wilcox_test(Tg ~ D,data = var_sep, conf.int=0.95)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, inf_est))
cvd$cardio <- as.factor(cvd$cardio)
inf_est <- function(var) {
print(ggplot(data = cvd, aes(x = cardio, y = !!sym(var), color = cardio)) +
geom_boxplot() +
theme_bw()
)
print(var)
print(fligner.test(cvd[[var]]~cvd$cardio))
sep<-gsub("yes","Y", cvd[[var]])
sep<-gsub("no","N", cvd[[var]])
var_sep<-data.frame(Tg=cvd[[var]], D=cvd$cardio)
print(wilcox_test(Tg ~ D,data = var_sep, conf.int=0.95))
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, inf_est))
cvd$cardio <- as.factor(cvd$cardio)
inf_est <- function(var) {
print(ggplot(data = cvd, aes(x = cardio, y = !!sym(var), color = cardio)) +
geom_boxplot() +
theme_bw()
)
print(var)
print(fligner.test(cvd[[var]]~cvd$cardio))
sep<-gsub("yes","Y", cvd[[var]])
sep<-gsub("no","N", cvd[[var]])
var_sep<-data.frame(dt=cvd[[var]], v=cvd$cardio)
print(wilcox_test(dt ~ v,data = var_sep, conf.int=0.95))
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, inf_est))
library(ggplot2)
# Usamos una librería especializada para coeficiente de asimetría
library(moments)
library(qdap) # manipulacion de datos
library(e1071) # asimetría
library(bestNormalize) # transformación de datos
library(fitdistrplus) # gráfica Cullen-Frey
library(dslabs) # datos PCA
library(factoextra) # gráficas PCA
library(nortest)
library(Rtsne)
library(umap)
library(coin)
library(qdap) # manipulacion de datos
# Abrir archivo
cvd <- read.csv("../data/cardiovascular_disease.csv")
# Observamos los primeros registros
head(cvd, n = 6)
# Observamos los últimos registros
tail(cvd)
# Observamos las dimensiones
dim(cvd)
check_na <- function(data) {
# Verificar si cada columna tiene al menos un NA
cols_with_na <- sapply(data, function(col) any(is.na(col)))
# Resultado como lista
list(cols_with_na = cols_with_na)
}
# Aplicar la función
na_presence <- check_na(cvd)
# Resultados
na_presence$cols_with_na  # TRUE si la columna tiene al menos un NA
numeric_attributes <- c("age_year","height","weight","ap_hi","ap_lo")
# Inicializar el dataframe vacío con las columnas mean, mode y median
df_mmm <- data.frame(mean = numeric(length(numeric_attributes)),
mode = numeric(length(numeric_attributes)),
median = numeric(length(numeric_attributes)),
max = numeric(length(numeric_attributes)),
min = numeric(length(numeric_attributes)),
row.names = numeric_attributes)
# Definir la función para calcular las estadísticas
mmm <- function(var) {
mode <- as.numeric(names(which.max(table(cvd[[var]]))))
median <- median(cvd[[var]])
mean <- mean(cvd[[var]])
max <- max(cvd[[var]])
min <- min(cvd[[var]])
# Asignar los resultados a la fila correspondiente de df_mmm
df_mmm[var, ] <<- c(mean = mean, mode = mode, median = median, max = max, min = min)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, mmm))
# Ver el resultado
df_mmm
# Inicializar el dataframe vacío con las columnas mean, mode y median
df_vs <- data.frame(vari = numeric(length(numeric_attributes)),
sd = numeric(length(numeric_attributes)),
row.names = numeric_attributes)
# Definir la función para calcular las estadísticas
vs <- function(var) {
vari <- var(cvd[[var]])
sd <- sd(cvd[[var]])
# Asignar los resultados a la fila correspondiente de df_mmm
df_vs[var, ] <<- c(vari=vari, sd=sd)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, vs))
# Ver el resultado
df_vs
# Función para crear un boxplot para cada variable
boxplots <- function(var) {
print(ggplot(cvd, aes_string(y = var)) +
geom_boxplot(fill = "green") + theme_classic() +
labs(title = paste("Boxplot of", var), x = "Observations", y = var))
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, boxplots))
par(mfrow=c(2, 2))
# Inicializar el dataframe vacío con los cuantiles
df_qs <- data.frame(Q1 = numeric(length(numeric_attributes)),
Q2 = numeric(length(numeric_attributes)),
Q3 = numeric(length(numeric_attributes)),
O_up = numeric(length(numeric_attributes)),
O_down = numeric(length(numeric_attributes)),
row.names = numeric_attributes)
# Definir la función para calcular las estadísticas
qs <- function(var) {
quantiles <- quantile(cvd[[var]])
iqr <- IQR(cvd[[var]])
Q1 <- quantiles["25%"]
Q2 <- quantiles["50%"]
Q3 <- quantiles["75%"]
O_up <- Q3 + (1.5*iqr)
O_down <- Q1 - (1.5*iqr)
# Asignar los resultados a la fila correspondiente de df_mmm
df_qs[var, ] <<- c(Q1 = Q1, Q2 = Q2, Q3 = Q3, O_up = O_up, O_down = O_down)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, qs))
df_qs
df_sk <- data.frame(skew = numeric(length(numeric_attributes)),
kur = numeric(length(numeric_attributes)),
row.names = numeric_attributes)
# Definir la función para calcular las estadísticas
sk <- function(var) {
skew <- skewness(cvd[[var]])
kur <- kurtosis(cvd[[var]])
# Asignar los resultados a la fila correspondiente de df_mmm
df_sk[var, ] <<- c(skew = skew , kur = kur)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, sk))
df_sk
cvd$bmi <- cvd$weight/((cvd$height/100)**2)
cvd$pulse <- cvd$ap_hi - cvd$ap_lo
head(cvd)
numeric_attributes <- c("age_year","height","weight","ap_hi","ap_lo", "bmi", "pulse")
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, mmm))
# Ver el resultado
df_mmm
par(mfrow=c(2, 2))
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, qs))
df_qs
invisible(lapply(c("bmi", "pulse"), boxplots))
cvd_original <- cvd
cvd <- subset(cvd, (cvd$bmi <= 39.74288 & cvd$bmi >= 14.35445) & (cvd$pulse <= 65 & cvd$pulse >= 25))
print("bmi")
max(cvd$bmi)
min(cvd$bmi)
print("pulse")
max(cvd$pulse)
min(cvd$pulse)
cvd$bmi_clasification <- findInterval(cvd$bmi, c(0, 18.5, 25, 30, 40))
cvd$bmi_clasification <- multigsub(sort(unique(cvd$bmi_clasification)), # patrón a buscar
c("Bajo peso", "Peso normal", "Sobrepeso", "Obesidad"),
cvd$bmi_clasification) # objeto sobre el cual reemplazar
head(cvd)
cvd$pulse_clasification <- findInterval(cvd$pulse, c(0, 30, 40, 50, 66))
head(cvd)
par(mfrow = c(2,2))
# Función para crear un boxplot para cada variable
qq <- function(var) {
qqnorm(cvd[[var]], main = var)
qqline(cvd[[var]])
nor <- lillie.test(cvd[[var]])
print(
paste(var,"pvalue:", nor$p.value)
)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, qq))
write.csv(cvd, "../data/cvd_transformed.csv", row.names = FALSE)
cvd$gender <- multigsub(sort(unique(cvd$gender)), c("M", "H"), cvd$gender)
cvd$cholesterol <- multigsub(sort(unique(cvd$cholesterol)), c("Normal", "Elevado", "Muy elevado"), cvd$cholesterol)
cvd$gluc <- multigsub(sort(unique(cvd$gluc)), c("Normal", "Elevado", "Muy elevado"), cvd$gluc)
cvd$smoke <- multigsub(sort(unique(cvd$smoke)), c("No", "Sí"), cvd$smoke)
cvd$alco <- multigsub(sort(unique(cvd$alco)), c("No", "Sí"), cvd$alco)
cvd$active <- multigsub(sort(unique(cvd$active)), c("Pasivo", "Activo"), cvd$active)
cvd$cardio <- multigsub(sort(unique(cvd$cardio)), c("No", "Sí"), cvd$cardio)
head(cvd)
cvd$cardio <- as.factor(cvd$cardio)
inf_est <- function(var) {
print(ggplot(data = cvd, aes(x = cardio, y = !!sym(var), color = cardio)) +
geom_boxplot() +
theme_bw()
)
print(var)
print(fligner.test(cvd[[var]]~cvd$cardio))
sep<-gsub("yes","Y", cvd[[var]])
sep<-gsub("no","N", cvd[[var]])
var_sep<-data.frame(dt=cvd[[var]], v=cvd$cardio)
print(wilcox_test(dt ~ v,data = var_sep, conf.int=0.95))
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, inf_est))
sum((cvd$cardio)=="No")
sum((cvd$cardio)=="Sí")
tabla <- table(cvd$cardio)
ggplot(cvd, aes(x = cardio, fill = cardio) +
geom_bar(position = "fill") + # posición "fill" muestra proporciones
labs(y = "Proporción", x = "Cardio") +
theme_minimal())
tabla <- table(cvd$cardio)
ggplot(cvd, aes(x = cardio) +
geom_bar() + # posición "fill" muestra proporciones
labs(y = "Proporción", x = "Cardio") +
theme_minimal())
ggplot(cvd, aes(x = cardio)) +
geom_bar(aes(fill = cardio), position = "stack") +
theme_minimal() +
labs(title = "Gráfico de Barra Acumulada", x = "Cardio", y = "Frecuencia")
ggplot(cvd, aes(x = 1, fill = cardio)) +
geom_bar(position = "stack") +
theme_minimal() +
labs(title = "Gráfico de Barra Acumulada", x = "Categoría", y = "Frecuencia") +
scale_x_continuous(breaks = NULL)  # Esto elimina la etiqueta del eje x
# Calcular las frecuencias de cada categoría
data_freq <- as.data.frame(table(cvd$cardio))
colnames(data_freq) <- c("cardio", "frecuencia")
# Crear el gráfico de pastel
ggplot(data_freq, aes(x = "", y = frecuencia, fill = cardio)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
theme_minimal() +
labs(title = "Gráfico de Pastel de Categorías") +
theme(axis.text.x = element_blank(), axis.ticks = element_blank())  # Elimina las marcas del eje
# Calcular las frecuencias de cada categoría
data_freq <- as.data.frame(table(cvd$cardio))
colnames(data_freq) <- c("cardio", "frecuencia")
# Crear el gráfico de pastel
ggplot(data_freq, aes(x = "", y = frecuencia, fill = cardio)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
theme_minimal() +
labs(title = "Proporción de enfermedad cardiovascular") +
theme(axis.text.x = element_blank(), axis.ticks = element_blank())  # Elimina las marcas del eje
# Calcular las frecuencias de cada categoría
data_freq <- as.data.frame(table(cvd$cardio))
colnames(data_freq) <- c("cardio", "frecuencia")
# Crear el gráfico de pastel
ggplot(data_freq, aes(x = "", y = frecuencia, fill = cardio)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
theme_minimal() +
labs(title = "Proporción de enfermedad cardiovascular") +
theme(
axis.text.x = element_blank(),   # Elimina las etiquetas del eje X
axis.ticks = element_blank(),    # Elimina las marcas del eje X
axis.title.x = element_blank()   # Elimina el título del eje X
)
# Calcular las frecuencias de cada categoría
data_freq <- as.data.frame(table(cvd$cardio))
colnames(data_freq) <- c("cardio", "frecuencia")
# Crear el gráfico de pastel
ggplot(data_freq, aes(x = "frecuencia", y = frecuencia, fill = cardio)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
theme_minimal() +
labs(title = "Proporción de enfermedad cardiovascular") +
theme(
axis.text.x = element_blank(),   # Elimina las etiquetas del eje X
axis.ticks = element_blank(),    # Elimina las marcas del eje X
axis.title.x = element_blank()   # Elimina el título del eje X
)
# Calcular las frecuencias de cada categoría
data_freq <- as.data.frame(table(cvd$cardio))
colnames(data_freq) <- c("cardio", "frecuencia")
# Crear el gráfico de pastel
ggplot(data_freq, aes(x = "", y = frecuencia, fill = cardio)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
theme_minimal() +
labs(title = "Proporción de enfermedad cardiovascular") +
theme(axis.text.x = element_blank(), axis.ticks = element_blank())  # Elimina las marcas del eje
