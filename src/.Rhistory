df_mmm[var] <- c(mean=mean, mode=mode, median=median)
}
invisible(lapply(numeric_attributes, mmm))
numeric_attributes <- c("age_year","height","weight","ap_hi","ap_lo")
mmm <- function(var) {
mode <- as.numeric(names(which.max(table(cvd$var))))
median <- median(cvd$var)
mean <- mean(cvd$var)
df_mmm[[var]] <<- c(mean = mean, mode = mode, median = median)
}
invisible(lapply(numeric_attributes, mmm))
df_mmm <- data.frame()
numeric_attributes <- c("age_year","height","weight","ap_hi","ap_lo")
mmm <- function(var) {
mode <- as.numeric(names(which.max(table(cvd$var))))
median <- median(cvd$var)
mean <- mean(cvd$var)
df_mmm[[var]] <<- c(mean = mean, mode = mode, median = median)
}
invisible(lapply(numeric_attributes, mmm))
df_mmm <- data.frame()
numeric_attributes <- c("age_year","height","weight","ap_hi","ap_lo")
# Definir la función con el nombre correcto y las correcciones
mmm <- function(var) {
mode <- as.numeric(names(which.max(table(cvd[[var]]))))
median <- median(cvd[[var]], na.rm = TRUE)
mean <- mean(cvd[[var]], na.rm = TRUE)
# Asignar los resultados a una fila de df_mmm
df_mmm[[var]] <<- c(mean = mean, mode = mode, median = median)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, mmm))
df_mmm <- data.frame(mean = numeric(), mode = numeric(), median = numeric(), row.names = numeric_attributes)
numeric_attributes <- c("age_year","height","weight","ap_hi","ap_lo")
# Inicializar el dataframe con las filas para las estadísticas
df_mmm <- data.frame(mean = numeric(), mode = numeric(), median = numeric(), row.names = numeric_attributes)
numeric_attributes <- c("age_year","height","weight","ap_hi","ap_lo")
# Inicializar el dataframe vacío con las columnas mean, mode y median
df_mmm <- data.frame(mean = numeric(length(numeric_attributes)),
mode = numeric(length(numeric_attributes)),
median = numeric(length(numeric_attributes)),
row.names = numeric_attributes)
# Definir la función para calcular las estadísticas
mmm <- function(var) {
mode <- as.numeric(names(which.max(table(cvd[[var]]))))
median <- median(cvd[[var]], na.rm = TRUE)
mean <- mean(cvd[[var]], na.rm = TRUE)
# Asignar los resultados a la fila correspondiente de df_mmm
df_mmm[var, ] <<- c(mean = mean, mode = mode, median = median)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, mmm))
# Ver el resultado
df_mmm
numeric_attributes <- c("age_year","height","weight","ap_hi","ap_lo")
# Inicializar el dataframe vacío con las columnas mean, mode y median
df_mmm <- data.frame(mean = numeric(length(numeric_attributes)),
mode = numeric(length(numeric_attributes)),
median = numeric(length(numeric_attributes)),
max = numeric(length(numeric_attributes)),
min = numeric(length(numeric_attributes)),
row.names = numeric_attributes)
# Definir la función para calcular las estadísticas
mmm <- function(var) {
mode <- as.numeric(names(which.max(table(cvd[[var]]))))
median <- median(cvd[[var]])
mean <- mean(cvd[[var]])
max <- max(cvd$var)
min <- min(cvd$var)
# Asignar los resultados a la fila correspondiente de df_mmm
df_mmm[var, ] <<- c(mean = mean, mode = mode, median = median, max = max, min = min)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, mmm))
# Ver el resultado
df_mmm
numeric_attributes <- c("age_year","height","weight","ap_hi","ap_lo")
# Inicializar el dataframe vacío con las columnas mean, mode y median
df_mmm <- data.frame(mean = numeric(length(numeric_attributes)),
mode = numeric(length(numeric_attributes)),
median = numeric(length(numeric_attributes)),
max = numeric(length(numeric_attributes)),
min = numeric(length(numeric_attributes)),
row.names = numeric_attributes)
# Definir la función para calcular las estadísticas
mmm <- function(var) {
mode <- as.numeric(names(which.max(table(cvd[[var]]))))
median <- median(cvd[[var]])
mean <- mean(cvd[[var]])
max <- max(cvd$var, na.rm = TRUE)
min <- min(cvd$var, na.rm = TRUE)
# Asignar los resultados a la fila correspondiente de df_mmm
df_mmm[var, ] <<- c(mean = mean, mode = mode, median = median, max = max, min = min)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, mmm))
# Ver el resultado
df_mmm
numeric_attributes <- c("age_year","height","weight","ap_hi","ap_lo")
# Inicializar el dataframe vacío con las columnas mean, mode y median
df_mmm <- data.frame(mean = numeric(length(numeric_attributes)),
mode = numeric(length(numeric_attributes)),
median = numeric(length(numeric_attributes)),
max = numeric(length(numeric_attributes)),
min = numeric(length(numeric_attributes)),
row.names = numeric_attributes)
# Definir la función para calcular las estadísticas
mmm <- function(var) {
mode <- as.numeric(names(which.max(table(cvd[[var]]))))
median <- median(cvd[[var]])
mean <- mean(cvd[[var]])
max <- max(cvd[[var]])
min <- min(cvd[[var]])
# Asignar los resultados a la fila correspondiente de df_mmm
df_mmm[var, ] <<- c(mean = mean, mode = mode, median = median, max = max, min = min)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, mmm))
# Ver el resultado
df_mmm
View(cvd)
max(cvd$ap_hi)
sum(cvd$ap_hi > 1000)
sum(cvd$ap_hi > 200)
sum(cvd$ap_hi < 80)
sum(cvd$ap_hi < 20)
sum(cvd$ap_hi < 10)
sum(cvd$ap_hi < 0)
sum(cvd$ap_lo < 0)
sum(cvd$ap_lo > 200)
sum(cvd$height > 200)
sum(cvd$height > 100)
sum(cvd$height < 100)
sum(cvd$weight > 100)
sum(cvd$weight > 100)
sum(cvd$weight < 100)
sum(cvd$weight > 40)
sum(cvd$weight < 40)
# Inicializar el dataframe vacío con las columnas mean, mode y median
df_vs <- data.frame(var = numeric(length(numeric_attributes)),
sd = numeric(length(numeric_attributes)),
row.names = numeric_attributes)
# Definir la función para calcular las estadísticas
vs <- function(var) {
var <- var(cvd[[var]])
sd <- sd(cvd[[var]])
# Asignar los resultados a la fila correspondiente de df_mmm
df_vs[var, ] <<- c(var=var, sd=sd)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, vs))
# Inicializar el dataframe vacío con las columnas mean, mode y median
df_vs <- data.frame(vari = numeric(length(numeric_attributes)),
sd = numeric(length(numeric_attributes)),
row.names = numeric_attributes)
# Definir la función para calcular las estadísticas
vs <- function(var) {
vari <- var(cvd[[var]])
sd <- sd(cvd[[var]])
# Asignar los resultados a la fila correspondiente de df_mmm
df_vs[var, ] <<- c(vari=vari, sd=sd)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, vs))
# Ver el resultado
df_vs
boxplots <- function(var) {
print(ggplot(data, aes_string(sample = var)) +
geom_boxplot(fill="green") + theme_classic() +
labs(title = paste("Boxplot ", var), x = var,y="Measure"))
}
invisible(lapply(numeric_attributes, boxplots))
library(ggplot2)
# Usamos una librería especializada para coeficiente de asimetría
library(moments)
boxplots <- function(var) {
print(ggplot(cvd, aes_string(sample = var)) +
geom_boxplot(fill="green") + theme_classic() +
labs(title = paste("Boxplot ", var), x = var,y="Measure"))
}
invisible(lapply(numeric_attributes, boxplots))
# Función para crear un boxplot para cada variable
boxplots <- function(var) {
print(ggplot(cvd, aes_string(y = var)) +
geom_boxplot(fill = "green") + theme_classic() +
labs(title = paste("Boxplot of", var), x = "Observations", y = var))
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, boxplots))
library(ggplot2)
# Usamos una librería especializada para coeficiente de asimetría
library(moments)
# Abrir archivo
cvd <- read.csv("../data/cardiovascular_disease.csv")
# Observamos los primeros registros
head(cvd, n = 6)
# Observamos los últimos registros
tail(cvd)
# Observamos las dimensiones
dim(cvd)
library(ggplot2)
# Usamos una librería especializada para coeficiente de asimetría
library(moments)
# Abrir archivo
cvd <- read.csv("../data/cardiovascular_disease.csv")
# Observamos los primeros registros
head(cvd, n = 6)
# Observamos los últimos registros
tail(cvd)
# Observamos las dimensiones
dim(cvd)
check_na <- function(data) {
# Verificar si cada columna tiene al menos un NA
cols_with_na <- sapply(data, function(col) any(is.na(col)))
# Resultado como lista
list(cols_with_na = cols_with_na)
}
# Aplicar la función
na_presence <- check_na(cvd)
# Resultados
na_presence$cols_with_na  # TRUE si la columna tiene al menos un NA
numeric_attributes <- c("age_year","height","weight","ap_hi","ap_lo")
# Inicializar el dataframe vacío con las columnas mean, mode y median
df_mmm <- data.frame(mean = numeric(length(numeric_attributes)),
mode = numeric(length(numeric_attributes)),
median = numeric(length(numeric_attributes)),
max = numeric(length(numeric_attributes)),
min = numeric(length(numeric_attributes)),
row.names = numeric_attributes)
# Definir la función para calcular las estadísticas
mmm <- function(var) {
mode <- as.numeric(names(which.max(table(cvd[[var]]))))
median <- median(cvd[[var]])
mean <- mean(cvd[[var]])
max <- max(cvd[[var]])
min <- min(cvd[[var]])
# Asignar los resultados a la fila correspondiente de df_mmm
df_mmm[var, ] <<- c(mean = mean, mode = mode, median = median, max = max, min = min)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, mmm))
# Ver el resultado
df_mmm
# Inicializar el dataframe vacío con las columnas mean, mode y median
df_vs <- data.frame(vari = numeric(length(numeric_attributes)),
sd = numeric(length(numeric_attributes)),
row.names = numeric_attributes)
# Definir la función para calcular las estadísticas
vs <- function(var) {
vari <- var(cvd[[var]])
sd <- sd(cvd[[var]])
# Asignar los resultados a la fila correspondiente de df_mmm
df_vs[var, ] <<- c(vari=vari, sd=sd)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, vs))
# Ver el resultado
df_vs
# Función para crear un boxplot para cada variable
boxplots <- function(var) {
print(ggplot(cvd, aes_string(y = var)) +
geom_boxplot(fill = "green") + theme_classic() +
labs(title = paste("Boxplot of", var), x = "Observations", y = var))
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, boxplots))
quantile(cvd$height)
ola <- quantile(cvd$height)
ola
ola[0%]
ola["0%"]
par(mfrow=c(2, 2))
# Inicializar el dataframe vacío con los cuantiles
df_qs <- data.frame(Q1 = numeric(length(numeric_attributes)),
Q2 = numeric(length(numeric_attributes)),
Q3 = numeric(length(numeric_attributes)),
O_up = numeric(length(numeric_attributes)),
O_down = numeric(length(numeric_attributes)),
row.names = numeric_attributes)
# Definir la función para calcular las estadísticas
qs <- function(var) {
quantiles <- qunatile(cvd[[var]])
iqr <- IQR(cvd[[var]])
Q1 <- quantiles["25%"]
Q2 <- quantiles["50%"]
Q3 <- quantiles["75%"]
O_up <- Q3 + (1.5*iqr)
O_down <- Q1 - (1.5*iqr)
# Asignar los resultados a la fila correspondiente de df_mmm
df_qs[var, ] <<- c(Q1 = Q1, Q2 = Q2, Q3 = Q3, O_up = O_up, O_down = O_down)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, qs))
par(mfrow=c(2, 2))
# Inicializar el dataframe vacío con los cuantiles
df_qs <- data.frame(Q1 = numeric(length(numeric_attributes)),
Q2 = numeric(length(numeric_attributes)),
Q3 = numeric(length(numeric_attributes)),
O_up = numeric(length(numeric_attributes)),
O_down = numeric(length(numeric_attributes)),
row.names = numeric_attributes)
# Definir la función para calcular las estadísticas
qs <- function(var) {
quantiles <- quantile(cvd[[var]])
iqr <- IQR(cvd[[var]])
Q1 <- quantiles["25%"]
Q2 <- quantiles["50%"]
Q3 <- quantiles["75%"]
O_up <- Q3 + (1.5*iqr)
O_down <- Q1 - (1.5*iqr)
# Asignar los resultados a la fila correspondiente de df_mmm
df_qs[var, ] <<- c(Q1 = Q1, Q2 = Q2, Q3 = Q3, O_up = O_up, O_down = O_down)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, qs))
par(mfrow=c(2, 2))
# Inicializar el dataframe vacío con los cuantiles
df_qs <- data.frame(Q1 = numeric(length(numeric_attributes)),
Q2 = numeric(length(numeric_attributes)),
Q3 = numeric(length(numeric_attributes)),
O_up = numeric(length(numeric_attributes)),
O_down = numeric(length(numeric_attributes)),
row.names = numeric_attributes)
# Definir la función para calcular las estadísticas
qs <- function(var) {
quantiles <- quantile(cvd[[var]])
iqr <- IQR(cvd[[var]])
Q1 <- quantiles["25%"]
Q2 <- quantiles["50%"]
Q3 <- quantiles["75%"]
O_up <- Q3 + (1.5*iqr)
O_down <- Q1 - (1.5*iqr)
# Asignar los resultados a la fila correspondiente de df_mmm
df_qs[var, ] <<- c(Q1 = Q1, Q2 = Q2, Q3 = Q3, O_up = O_up, O_down = O_down)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, qs))
par(mfrow=c(2, 2))
# Inicializar el dataframe vacío con los cuantiles
df_qs <- data.frame(Q1 = numeric(length(numeric_attributes)),
Q2 = numeric(length(numeric_attributes)),
Q3 = numeric(length(numeric_attributes)),
O_up = numeric(length(numeric_attributes)),
O_down = numeric(length(numeric_attributes)),
row.names = numeric_attributes)
# Definir la función para calcular las estadísticas
qs <- function(var) {
quantiles <- quantile(cvd[[var]])
iqr <- IQR(cvd[[var]])
Q1 <- quantiles["25%"]
Q2 <- quantiles["50%"]
Q3 <- quantiles["75%"]
O_up <- Q3 + (1.5*iqr)
O_down <- Q1 - (1.5*iqr)
# Asignar los resultados a la fila correspondiente de df_mmm
df_qs[var, ] <<- c(Q1 = Q1, Q2 = Q2, Q3 = Q3, O_up = O_up, O_down = O_down)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, qs))
df_qs
# Función para crear un boxplot para cada variable
hists <- function(var) {
print(ggplot(cvd, aes_string(y = var)) +
geom_histogram(aes(y=..density..),binwidth = 2, color = "black", fill = "white") +  geom_density(alpha = 0.2, fill = "blue") +
labs(title = paste("Histogram of", var), x = "Vlues", y = "Counts"))
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, hists))
library(ggplot2)
# Usamos una librería especializada para coeficiente de asimetría
library(moments)
# Función para crear un boxplot para cada variable
hists <- function(var) {
print(ggplot(cvd, aes_string(y = var)) +
geom_histogram(aes(y=..density..),binwidth = 2, color = "black", fill = "white") +  geom_density(alpha = 0.2, fill = "blue") +
labs(title = paste("Histogram of", var), x = "Vlues", y = "Counts"))
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, hists))
# Función para crear un boxplot para cada variable
hists <- function(var) {
print(ggplot(cvd, aes_string(y = var)) +
geom_histogram(aes(y=..density..),binwidth = 2, color = "black", fill = "white") +
geom_density(alpha = 0.2, fill = "blue") +
labs(title = paste("Histogram of", var), x = "Vlues", y = "Counts"))
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, hists))
# Función para crear un boxplot para cada variable
hists <- function(var) {
print(ggplot(cvd, aes_string(x = var)) +
geom_histogram(aes(y=..density..),binwidth = 2, color = "black", fill = "white") +
geom_density(alpha = 0.2, fill = "blue") +
labs(title = paste("Histogram of", var), x = "Vlues", y = "Counts"))
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, hists))
# Función para crear un boxplot para cada variable
hists <- function(var) {
print(ggplot(cvd, aes_string(x = var)) +
geom_histogram(aes(y=..density..),binwidth = 2, color = "black", fill = "white") +
geom_density(alpha = 0.2, fill = "blue") +
labs(title = paste("Histogram of", var), x = "Vlues", y = "Counts")) +
geom_vline(xintercept = mean(cvd[[var]]), color = "red", size = 1) +
geom_vline(xintercept = median(cvd[[var]]), color = "forestgreen",size=1)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, hists))
# Función para crear un boxplot para cada variable
hists <- function(var) {
print(ggplot(cvd, aes_string(x = var)) +
geom_histogram(aes(y=..density..),binwidth = 2, color = "black", fill = "white") +
geom_density(alpha = 0.2, fill = "blue") +
labs(title = paste("Histogram of", var), x = "Vlues", y = "Counts")) +
geom_vline(xintercept = mean(cvd[[var]]), color = "red") +
geom_vline(xintercept = median(cvd[[var]]), color = "forestgreen")
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, hists))
# Función para crear un boxplot para cada variable
hists <- function(var) {
print(
ggplot(cvd, aes_string(x = var)) +
geom_histogram(aes(y=..density..), binwidth = 2, color = "black", fill = "white") +
geom_density(alpha = 0.2, fill = "blue") +
labs(title = paste("Histogram of", var), x = "Values", y = "Density") +
geom_vline(xintercept = mean(cvd[[var]], na.rm = TRUE), color = "red") +
geom_vline(xintercept = median(cvd[[var]], na.rm = TRUE), color = "forestgreen")
)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, hists))
df_sk <- data.frame(skew = numeric(length(numeric_attributes)),
kur = numeric(length(numeric_attributes)),
row.names = numeric_attributes)
# Definir la función para calcular las estadísticas
sk <- function(var) {
skew <- skewness(cvd[[var]])
kur <- kurtosis(cvd[[var]])
# Asignar los resultados a la fila correspondiente de df_mmm
df_qs[var, ] <<- c(skew = skew , kur = kur)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, sk))
skewness(cvd$age_days)
skewness(cvd$gender)
df_sk <- data.frame(skew = numeric(length(numeric_attributes)),
kur = numeric(length(numeric_attributes)),
row.names = numeric_attributes)
# Definir la función para calcular las estadísticas
sk <- function(var) {
skew <- skewness(cvd[[var]])
kur <- kurtosis(cvd[[var]])
# Asignar los resultados a la fila correspondiente de df_mmm
df_sk[var, ] <<- c(skew = skew , kur = kur)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, sk))
df_sk
View(cvd)
library(ggplot2)
# Usamos una librería especializada para coeficiente de asimetría
library(moments)
library(qdap) # manipulacion de datos
library(e1071) # asimetría
library(bestNormalize) # transformación de datos
library(fitdistrplus) # gráfica Cullen-Frey
library(dslabs) # datos PCA
library(factoextra) # gráficas PCA
cvd$bmi <- cvd$weight/((cvd$height/100)**2)
cvd$pulse <- cvd$ap_hi - cvd$ap_lo
head(cvd)
numeric_attributes <- c("age_year","height","weight","ap_hi","ap_lo", "bmi", "pulse")
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, mmm))
# Ver el resultado
df_mmm
par(mfrow=c(2, 2))
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, qs))
df_qs
invisible(lapply(c("bmi", "pulse"), boxplots))
?subset
cvd_original <- cvd
cvd <- subset(cvd, (cvd$bmi < 39.74288 | cvd$bmi > 14.35445) & (cvd$pulse < 65 | cvd$pulse > 25))
print("bmi")
max(cvd$bmi)
min(cvd$bmi)
print("pulse")
max(cvd$pulse)
min(cvd$pulse)
View(cvd)
cvd_original <- cvd
cvd <- subset(cvd, (cvd$bmi <= 39.74288 & cvd$bmi >= 14.35445) & (cvd$pulse <= 65 & cvd$pulse >= 25))
print("bmi")
max(cvd$bmi)
min(cvd$bmi)
print("pulse")
max(cvd$pulse)
min(cvd$pulse)
bmi_group <- findInterval(cvd$bmi, c(18.5, 2, 29.9))
bmi_group <- findInterval(cvd$bmi, c(18.5, 25, 29.9))
summary(bmi_group)
bmi_group <- findInterval(cvd$bmi, c(18.5, 25, 30))
bmi_group
bmi_group <- findInterval(cvd$bmi, c(18.5, 25, 30))
levesl(bmi_group)
bmi_group <- findInterval(cvd$bmi, c(18.5, 25, 30))
levels(bmi_group)
bmi_group <- findInterval(cvd$bmi, c("<18.5", "18.5-24.9", "25-29.9", "30>"))
bmi_group
bmi_group <- multigsub(cvd$bmi, c("<18.5", "18.5-24.9", "25-29.9", "30>"))
