ggplot(counts2, aes(x = Colesterol, y = Counts, fill = Enfermedad)) +
geom_bar(stat = "identity", position=position_dodge()) +
coord_flip() +
scale_fill_discrete(name = "Presencia de una \n enfermedad \n cardiovascular", labels = c("No", "Sí")) +
scale_x_discrete(labels = c("normal", "por encima de lo normal", "muy por encima de lo normal")) +
labs(title = "Numero de personas por nivel de colesterol \n y enfermedad cardiovascular", x = "Nivel de colesterol", y = "Número de personas")
ggplot(counts, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0)
ggplot(counts, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0) +
theme(axis.text = element_blank(), #Elimina los numeros
axis.ticks = element_blank(), #Elimina la raya
panel.grid  = element_blank()) #Elimina el circulo blanco
ggplot(counts, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid  = element_blank()) +
scale_fill_discrete(name = "Actividad física", labels = c("Algo activa", "Mucho menos activa", "Mucho más activa", "Algo menos activa", "Algo más activa")) +
labs(title = "Numero de mujeres pertenecientes a cada grupo de \n actividad física", x = "", y = "")
ggplot(counts, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid  = element_blank()) +
scale_fill_discrete(name = "Actividad física", labels = c("Algo activa", "Mucho menos activa", "Mucho más activa", "Algo menos activa", "Algo más activa")) +
labs(title = "Numero de personas por nivel de colesterol \n y enfermedad cardiovascular", x = "", y = "")
ggplot(counts, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid  = element_blank()) +
scale_fill_discrete(name = "Actividad física", labels = c("Algo activa", "Mucho menos activa", "Mucho más activa", "Algo menos activa", "Algo más activa")) +
labs(title = "Numero de personas por nivel de \ncolesterol y enfermedad cardiovascular", x = "", y = "")
ggplot(counts, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid  = element_blank()) +
scale_fill_discrete(name = "Actividad física", labels = c("Algo activa", "Mucho menos activa", "Mucho más activa", "Algo menos activa", "Algo más activa")) +
labs(title = "Numero de personas por nivel de colesterol \n y enfermedad cardiovascular", x = "", y = "")
View(counts)
ggplot(counts, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid  = element_blank()) +
scale_fill_discrete(name = "Nivel de colesterol", labels = c("normal", "por encima de lo normal", "muy por encima de lo normal")) +
labs(title = "Numero de personas por nivel de colesterol", x = "", y = "")
ggplot(hers, aes(x = height)) +
geom_histogram() +
labs(title = "Histograma de la estatura", "Estatura (cm)", y = "Recuento")
ggplot(hers, aes(x = height)) +
geom_histogram(binwidth = 2, color = "black", fill = "white") +
labs(title = "Histograma de la estatura", x = "Estatura (cm)", y = "Recuento")
ggplot(hers, aes(x = height)) +
geom_histogram(aes(y=..density..), binwidth = 2, color = "black", fill = "white") +
geom_density(alpha = 0.2, fill = "blue") +
labs(title = "Histograma de la estatura", x = "Estatura (cm)", y = "Recuento")
ggplot(hers, aes(x = height)) +
geom_histogram(aes(y=..density..), binwidth = 2, color = "black", fill = "white") +
geom_density(alpha = 0.2, fill = "blue") +
labs(title = "Histograma de la estatura", x = "Estatura (cm)", y = "Recuento")
ggplot(hers, aes(x = height, color = gender)) +
geom_histogram(binwidth = 2.5) +
labs(title = "Histograma de la estatura", x = "Estatura (cm)", y = "Recuento")
ggplot(hers, aes(x = height, color = gender)) +
geom_histogram(binwidth = 2.5) +
labs(title = "Histograma de la estatura", x = "Estatura (cm)", y = "Recuento") +
scale_color_discrete(name = "Género", labels = c("Mujer", "Hombre"))
View(hers)
ggplot(hers, aes(x = height, color = gender)) +
geom_histogram(binwidth = 2.5) +
labs(title = "Histograma de la estatura", x = "Estatura (cm)", y = "Recuento") +
scale_color_discrete(name = "Género", labels = c("Mujer", "Hombre"))
ggplot(hers, aes(x = height, color = factor(gender))) +
geom_histogram(binwidth = 2.5) +
labs(title = "Histograma de la estatura", x = "Estatura (cm)", y = "Recuento") +
scale_color_discrete(name = "Género", labels = c("Mujer", "Hombre"))
ggplot(hers, aes(x = ap_hi, y = ap_lo)) +
geom_point() +
labs(title = "Gráfica de dispersión entre presión sistólica y diastólica", x = "Presión sistólica", y = "Presión diastólica")
ggplot(hers, aes(x = ap_hi, y = ap_lo)) +
geom_point() +
geom_smooth(method = lm) +
labs(title = "Gráfica de dispersión entre presión sistólica y diastólica", x = "Presión sistólica", y = "Presión diastólica")
ggplot(hers, aes(x = ap_hi, y = ap_lo)) +
geom_point(color = "#39B600", shape = 23, alpha = 0.5) +
labs(title = "Gráfica de dispersión entre presión sistólica y diastólica", x = "Presión sistólica", y = "Presión diastólica")
ggplot(hers, aes(x = ap_hi, y = ap_lo)) +
geom_point() +
geom_smooth(method = lm) +
labs(title = "Gráfica de dispersión entre presión sistólica y diastólica", x = "Presión sistólica", y = "Presión diastólica") + xlim(0, 250) +
ylim(0, 200)
ggplot(hers, aes(x = ap_hi, y = ap_lo)) +
geom_point(color = "#39B600", shape = 23, alpha = 0.5) +
labs(title = "Gráfica de dispersión entre presión sistólica y diastólica", x = "Presión sistólica", y = "Presión diastólica") + xlim(0, 250) +
ylim(0, 200)
# Chunk 1
library(ggplot2)
# Chunk 2
hers <- read.csv("../data/cardiovascular_disease.csv")
# Chunk 3
head(hers)
dim(hers)
# Chunk 4
counts <- table(hers$cholesterol) #Obtenemos la cuenta para cada categoría con la funcion table()
counts <- as.data.frame(counts) #Lo convertimos en un dataframe para gráficar
counts
# Chunk 5
ggplot(counts, aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
theme(axis.ticks.x = element_blank(), axis.text.x=element_blank()) +
scale_fill_discrete(name = "Nivel de colesterol", labels = c("normal", "por encima de lo normal", "muy por encima de lo normal")) +
labs(title = "Numero de personas por nivel de colesterol", x = "Nivel de colesterol", y = "Número personas")
# Chunk 6
counts2 <- tapply(hers$cholesterol,
list(hers$cholesterol, hers$cardio),
table)
counts2 <- as.data.frame(counts2)
counts2$Colesterol <- rownames(counts2)
counts2
# Chunk 7
counts2 <- reshape(counts2, #Objeto a transformar
direction = "long", #Necesitamos formato long
varying = list(names(counts2)[1:2]), #Las columnas a alargar (las que tienen las cuentas) son la 1 y la 2
v.names = "Counts", #Las cuentas se almacenaran en la columna "Counts"
idvar = "Colesterol", #La variable con los identificadores del grupo de actividad fisica
timevar = "Enfermedad", #Variable que vamos a alargar, que corresponde a las columnas "no" y "yes"
times = c("no", "yes"))
row.names(counts2) <- NULL
counts2
# Chunk 8
#Barras lado a lado
ggplot(counts2, aes(x = Colesterol, y = Counts, fill = Enfermedad)) +
geom_bar(stat = "identity", position=position_dodge()) +
coord_flip() +
scale_fill_discrete(name = "Presencia de una \n enfermedad \n cardiovascular", labels = c("No", "Sí")) +
scale_x_discrete(labels = c("normal", "por encima de lo normal", "muy por encima de lo normal")) +
labs(title = "Numero de personas por nivel de colesterol \n y enfermedad cardiovascular", x = "Nivel de colesterol", y = "Número de personas")
# Chunk 9
ggplot(counts, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
coord_polar("y", start = 0) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid  = element_blank()) +
scale_fill_discrete(name = "Nivel de colesterol", labels = c("normal", "por encima de lo normal", "muy por encima de lo normal")) +
labs(title = "Numero de personas por nivel de colesterol", x = "", y = "")
# Chunk 10
ggplot(hers, aes(x = height)) +
geom_histogram() +
labs(title = "Histograma de la estatura", "Estatura (cm)", y = "Recuento")
# Chunk 11
ggplot(hers, aes(x = height)) +
geom_histogram(binwidth = 2, color = "black", fill = "white") +
labs(title = "Histograma de la estatura", x = "Estatura (cm)", y = "Recuento")
# Chunk 12
ggplot(hers, aes(x = height)) +
geom_histogram(aes(y=..density..), binwidth = 2, color = "black", fill = "white") +
geom_density(alpha = 0.2, fill = "blue") +
labs(title = "Histograma de la estatura", x = "Estatura (cm)", y = "Recuento")
# Chunk 13
ggplot(hers, aes(x = height, color = factor(gender))) +
geom_histogram(binwidth = 2.5) +
labs(title = "Histograma de la estatura", x = "Estatura (cm)", y = "Recuento") +
scale_color_discrete(name = "Género", labels = c("Mujer", "Hombre"))
# Chunk 14
ggplot(hers, aes(x = ap_hi, y = ap_lo)) +
geom_point() +
labs(title = "Gráfica de dispersión entre presión sistólica y diastólica", x = "Presión sistólica", y = "Presión diastólica") + xlim(0, 250) +
ylim(0, 200)
# Chunk 15
ggplot(hers, aes(x = ap_hi, y = ap_lo)) +
geom_point() +
geom_smooth(method = lm) +
labs(title = "Gráfica de dispersión entre presión sistólica y diastólica", x = "Presión sistólica", y = "Presión diastólica") + xlim(0, 250) +
ylim(0, 200)
# Chunk 16
ggplot(hers, aes(x = ap_hi, y = ap_lo)) +
geom_point(color = "#39B600", shape = 23, alpha = 0.5) +
labs(title = "Gráfica de dispersión entre presión sistólica y diastólica", x = "Presión sistólica", y = "Presión diastólica") + xlim(0, 250) +
ylim(0, 200)
library(ggplot2)
hers <- read.csv("../data/cardiovascular_disease.csv")
library(ggplot2)
# Usamos una librería especializada para coeficiente de asimetría
library(moments)
hers <- read.table("../data/cardiovascular_disease.csv",sep = ",",header = T)
#Existen otras funciones como read.csv,read.csv2 o read.delim (sep= “,” “;” “\” respectivamente)
# Abrir archivo
cvd <- read.csv("../data/cardiovascular_disease.csv")
# Observamos los primeros registros
head(csv, n = 6)
# Abrir archivo
cvd <- read.csv("../data/cardiovascular_disease.csv")
# Observamos los primeros registros
head(cvd, n = 6)
# Observamos los últimos registros
tail(csv)
# Abrir archivo
cvd <- read.csv("../data/cardiovascular_disease.csv")
# Observamos los primeros registros
head(cvd, n = 6)
# Observamos los últimos registros
tail(cvd)
# Abrir archivo
cvd <- read.csv("../data/cardiovascular_disease.csv")
# Observamos los primeros registros
head(cvd, n = 6)
# Observamos los últimos registros
tail(cvd)
# Observamos las dimensiones
dim(cvd)
count_na <- function(data) {
# Contar NAs por columna
na_by_column <- colSums(is.na(data))
# Contar NAs por fila
na_by_row <- rowSums(is.na(data))
# Resultado como lista
list(na_by_column = na_by_column, na_by_row = na_by_row)
count_na <- function(data) {
# Contar NAs por columna
na_by_column <- colSums(is.na(data))
# Contar NAs por fila
na_by_row <- rowSums(is.na(data))
# Resultado como lista
list(na_by_column = na_by_column, na_by_row = na_by_row)
count_na <- function(data) {
# Contar NAs por columna
na_by_column <- colSums(is.na(data))
# Contar NAs por fila
na_by_row <- rowSums(is.na(data))
# Resultado como lista
list(na_by_column = na_by_column, na_by_row  =  na_by_row)
count_na <- function(data) {
# Contar NAs por columna
na_by_column <- colSums(is.na(data))
# Contar NAs por fila
na_by_row <- rowSums(is.na(data))
# Resultado como lista
list(na_by_column = na_by_column, na_by_row = na_by_row)
}
# Aplicar la función
na_counts <- count_na(cvd)
# Resultados
na_counts$na_by_column  # NAs por columna
na_counts$na_by_row   # NAs por fila
count_na <- function(data) {
# Contar NAs por columna
na_by_column <- colSums(is.na(data))
# Contar NAs por fila
na_by_row <- rowSums(is.na(data))
# Resultado como lista
list(na_by_column = na_by_column, na_by_row = na_by_row)
}
# Aplicar la función
na_counts <- count_na(cvd)
# Resultados
na_counts$na_by_column  # NAs por columna
na_counts$na_by_row   # NAs por fila
check_na <- function(data) {
# Verificar si cada columna tiene al menos un NA
cols_with_na <- sapply(data, function(col) any(is.na(col)))
# Verificar si cada fila tiene al menos un NA
rows_with_na <- apply(data, 1, function(row) any(is.na(row)))
# Resultado como lista
list(cols_with_na = cols_with_na, rows_with_na = rows_with_na)
}
# Aplicar la función
na_presence <- check_na(data)
check_na <- function(data) {
# Verificar si cada columna tiene al menos un NA
cols_with_na <- sapply(data, function(col) any(is.na(col)))
# Verificar si cada fila tiene al menos un NA
rows_with_na <- apply(data, 1, function(row) any(is.na(row)))
# Resultado como lista
list(cols_with_na = cols_with_na, rows_with_na = rows_with_na)
}
# Aplicar la función
na_presence <- check_na(cvd)
# Resultados
na_presence$cols_with_na  # TRUE si la columna tiene al menos un NA
na_presence$rows_with_na  # TRUE si la fila tiene al menos un NA
check_na <- function(data) {
# Verificar si cada columna tiene al menos un NA
cols_with_na <- sapply(data, function(col) any(is.na(col)))
# Verificar si cada fila tiene al menos un NA
rows_with_na <- apply(data, 1, function(row) any(is.na(row)))
# Resultado como lista
list(cols_with_na = cols_with_na, rows_with_na = rows_with_na)
}
# Aplicar la función
na_presence <- check_na(cvd)
# Resultados
na_presence$cols_with_na  # TRUE si la columna tiene al menos un NA
#na_presence$rows_with_na  # TRUE si la fila tiene al menos un NA
check_na <- function(data) {
# Verificar si cada columna tiene al menos un NA
cols_with_na <- sapply(data, function(col) any(is.na(col)))
# Resultado como lista
list(cols_with_na = cols_with_na)
}
# Aplicar la función
na_presence <- check_na(cvd)
# Resultados
na_presence$cols_with_na  # TRUE si la columna tiene al menos un NA
numeric_attributes <- c("age_year","height","weight","ap_hi","ap_lo")
mmm <- fuction(var, df_mmm) {
numeric_attributes <- c("age_year","height","weight","ap_hi","ap_lo")
mmm <- fuction(var) {
numeric_attributes <- c("age_year","height","weight","ap_hi","ap_lo")
mmm <- function(var) {
mode <- as.numeric(names(which.max(table(cvd$var))))
median <- median(cvd$var)
mean <- mean(cvd$var)
df_mmm[var] <- c(mean=mean, mode=mode, median=median)
}
invisible(lapply(numeric_attributes, mmm))
numeric_attributes <- c("age_year","height","weight","ap_hi","ap_lo")
mmm <- function(var) {
mode <- as.numeric(names(which.max(table(cvd$var))))
median <- median(cvd$var)
mean <- mean(cvd$var)
df_mmm[[var]] <<- c(mean = mean, mode = mode, median = median)
}
invisible(lapply(numeric_attributes, mmm))
df_mmm <- data.frame()
numeric_attributes <- c("age_year","height","weight","ap_hi","ap_lo")
mmm <- function(var) {
mode <- as.numeric(names(which.max(table(cvd$var))))
median <- median(cvd$var)
mean <- mean(cvd$var)
df_mmm[[var]] <<- c(mean = mean, mode = mode, median = median)
}
invisible(lapply(numeric_attributes, mmm))
df_mmm <- data.frame()
numeric_attributes <- c("age_year","height","weight","ap_hi","ap_lo")
# Definir la función con el nombre correcto y las correcciones
mmm <- function(var) {
mode <- as.numeric(names(which.max(table(cvd[[var]]))))
median <- median(cvd[[var]], na.rm = TRUE)
mean <- mean(cvd[[var]], na.rm = TRUE)
# Asignar los resultados a una fila de df_mmm
df_mmm[[var]] <<- c(mean = mean, mode = mode, median = median)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, mmm))
df_mmm <- data.frame(mean = numeric(), mode = numeric(), median = numeric(), row.names = numeric_attributes)
numeric_attributes <- c("age_year","height","weight","ap_hi","ap_lo")
# Inicializar el dataframe con las filas para las estadísticas
df_mmm <- data.frame(mean = numeric(), mode = numeric(), median = numeric(), row.names = numeric_attributes)
numeric_attributes <- c("age_year","height","weight","ap_hi","ap_lo")
# Inicializar el dataframe vacío con las columnas mean, mode y median
df_mmm <- data.frame(mean = numeric(length(numeric_attributes)),
mode = numeric(length(numeric_attributes)),
median = numeric(length(numeric_attributes)),
row.names = numeric_attributes)
# Definir la función para calcular las estadísticas
mmm <- function(var) {
mode <- as.numeric(names(which.max(table(cvd[[var]]))))
median <- median(cvd[[var]], na.rm = TRUE)
mean <- mean(cvd[[var]], na.rm = TRUE)
# Asignar los resultados a la fila correspondiente de df_mmm
df_mmm[var, ] <<- c(mean = mean, mode = mode, median = median)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, mmm))
# Ver el resultado
df_mmm
numeric_attributes <- c("age_year","height","weight","ap_hi","ap_lo")
# Inicializar el dataframe vacío con las columnas mean, mode y median
df_mmm <- data.frame(mean = numeric(length(numeric_attributes)),
mode = numeric(length(numeric_attributes)),
median = numeric(length(numeric_attributes)),
max = numeric(length(numeric_attributes)),
min = numeric(length(numeric_attributes)),
row.names = numeric_attributes)
# Definir la función para calcular las estadísticas
mmm <- function(var) {
mode <- as.numeric(names(which.max(table(cvd[[var]]))))
median <- median(cvd[[var]])
mean <- mean(cvd[[var]])
max <- max(cvd$var)
min <- min(cvd$var)
# Asignar los resultados a la fila correspondiente de df_mmm
df_mmm[var, ] <<- c(mean = mean, mode = mode, median = median, max = max, min = min)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, mmm))
# Ver el resultado
df_mmm
numeric_attributes <- c("age_year","height","weight","ap_hi","ap_lo")
# Inicializar el dataframe vacío con las columnas mean, mode y median
df_mmm <- data.frame(mean = numeric(length(numeric_attributes)),
mode = numeric(length(numeric_attributes)),
median = numeric(length(numeric_attributes)),
max = numeric(length(numeric_attributes)),
min = numeric(length(numeric_attributes)),
row.names = numeric_attributes)
# Definir la función para calcular las estadísticas
mmm <- function(var) {
mode <- as.numeric(names(which.max(table(cvd[[var]]))))
median <- median(cvd[[var]])
mean <- mean(cvd[[var]])
max <- max(cvd$var, na.rm = TRUE)
min <- min(cvd$var, na.rm = TRUE)
# Asignar los resultados a la fila correspondiente de df_mmm
df_mmm[var, ] <<- c(mean = mean, mode = mode, median = median, max = max, min = min)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, mmm))
# Ver el resultado
df_mmm
numeric_attributes <- c("age_year","height","weight","ap_hi","ap_lo")
# Inicializar el dataframe vacío con las columnas mean, mode y median
df_mmm <- data.frame(mean = numeric(length(numeric_attributes)),
mode = numeric(length(numeric_attributes)),
median = numeric(length(numeric_attributes)),
max = numeric(length(numeric_attributes)),
min = numeric(length(numeric_attributes)),
row.names = numeric_attributes)
# Definir la función para calcular las estadísticas
mmm <- function(var) {
mode <- as.numeric(names(which.max(table(cvd[[var]]))))
median <- median(cvd[[var]])
mean <- mean(cvd[[var]])
max <- max(cvd[[var]])
min <- min(cvd[[var]])
# Asignar los resultados a la fila correspondiente de df_mmm
df_mmm[var, ] <<- c(mean = mean, mode = mode, median = median, max = max, min = min)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, mmm))
# Ver el resultado
df_mmm
View(cvd)
max(cvd$ap_hi)
sum(cvd$ap_hi > 1000)
sum(cvd$ap_hi > 200)
sum(cvd$ap_hi < 80)
sum(cvd$ap_hi < 20)
sum(cvd$ap_hi < 10)
sum(cvd$ap_hi < 0)
sum(cvd$ap_lo < 0)
sum(cvd$ap_lo > 200)
sum(cvd$height > 200)
sum(cvd$height > 100)
sum(cvd$height < 100)
sum(cvd$weight > 100)
sum(cvd$weight > 100)
sum(cvd$weight < 100)
sum(cvd$weight > 40)
sum(cvd$weight < 40)
# Inicializar el dataframe vacío con las columnas mean, mode y median
df_vs <- data.frame(var = numeric(length(numeric_attributes)),
sd = numeric(length(numeric_attributes)),
row.names = numeric_attributes)
# Definir la función para calcular las estadísticas
vs <- function(var) {
var <- var(cvd[[var]])
sd <- sd(cvd[[var]])
# Asignar los resultados a la fila correspondiente de df_mmm
df_vs[var, ] <<- c(var=var, sd=sd)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, vs))
# Inicializar el dataframe vacío con las columnas mean, mode y median
df_vs <- data.frame(vari = numeric(length(numeric_attributes)),
sd = numeric(length(numeric_attributes)),
row.names = numeric_attributes)
# Definir la función para calcular las estadísticas
vs <- function(var) {
vari <- var(cvd[[var]])
sd <- sd(cvd[[var]])
# Asignar los resultados a la fila correspondiente de df_mmm
df_vs[var, ] <<- c(vari=vari, sd=sd)
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, vs))
# Ver el resultado
df_vs
boxplots <- function(var) {
print(ggplot(data, aes_string(sample = var)) +
geom_boxplot(fill="green") + theme_classic() +
labs(title = paste("Boxplot ", var), x = var,y="Measure"))
}
invisible(lapply(numeric_attributes, boxplots))
library(ggplot2)
# Usamos una librería especializada para coeficiente de asimetría
library(moments)
boxplots <- function(var) {
print(ggplot(cvd, aes_string(sample = var)) +
geom_boxplot(fill="green") + theme_classic() +
labs(title = paste("Boxplot ", var), x = var,y="Measure"))
}
invisible(lapply(numeric_attributes, boxplots))
# Función para crear un boxplot para cada variable
boxplots <- function(var) {
print(ggplot(cvd, aes_string(y = var)) +
geom_boxplot(fill = "green") + theme_classic() +
labs(title = paste("Boxplot of", var), x = "Observations", y = var))
}
# Aplicar la función a cada elemento de numeric_attributes
invisible(lapply(numeric_attributes, boxplots))
